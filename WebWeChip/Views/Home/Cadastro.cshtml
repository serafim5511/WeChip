@model EntitiesWeChip.Usuario
<div class="row">
    <div class="col-12">
        @using (Html.BeginForm("Cadastro", "Home", FormMethod.Post))
        {
            <div class="row">

                <section class="col-lg-12">

                    @if (ViewBag.Mensagem != "" && ViewBag.Mensagem != null)
                    {
                        <div class="small-box bg-info">
                            <div class="inner" style="text-align:center">
                                <p style="font-size:15px; color:white; font-weight:bold">@ViewBag.Mensagem</p>
                            </div>
                        </div>
                    }

                    <div class="box box-info">
                        @*<div class="cursor-pointer box-header with-border" onclick="Show()" data-widget="collapse">*@
                        <div class="cursor-pointer box-header with-border">
                            <h3 class="box-title">Dados Pessoais</h3>
                            <div class="box-tools pull-right">
                                <button type="button" class="btn btn-box-tool">
                                    <i class="fa fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="box-body">

                            <div class="row">

                                <div class="col-12 col-sm">
                                    @Html.HiddenFor(model => model.Id)
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Nome, new { @type = "text", @class = "form-control validate", @required = "required", @name = "Nome", @id = "Nome", @placeholder = "Nome" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Cpf, new { @type = "text", @class = "form-control validate", @required = "required", @name = "CPF", @id = "CPF", @placeholder = "CPF" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Credito, new { @type = "text", @class = "form-control validate", @name = "Credito", @id = "Credito", @placeholder = "R$" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Telefone, new { @type = "tel", @class = "form-control validate", @required = "required", @name = "Telefone", @id = "Telefone", @placeholder = "Telefone" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Cep, new { @type = "text", @class = "form-control validate cep",  @name = "cep", @id = "cep", @placeholder = "CEP" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Rua, new { @type = "text", @readonly = "readonly", @class = "form-control validate", @name = "logradouro", @id = "logradouro", @placeholder = "Endereço" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Numero, new { @type = "text", @class = "form-control validate", @name = "Numero", @id = "Numero", @placeholder = "Numero" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Complemento, new { @type = "text", @class = "form-control validate", @name = "complemento", @id = "complemento", @placeholder = "Complemento" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Bairro, new { @type = "text", @readonly = "readonly", @class = "form-control validate", @name = "bairro", @id = "bairro", @placeholder = "Bairro" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Cidade, new { @type = "text", @readonly = "readonly", @class = "form-control validate", @name = "localidade", @id = "localidade", @placeholder = "Cidade" })
                                    </div>
                                    <div class="form-group md-form">
                                        @Html.TextBoxFor(txt => txt.Estado, new { @type = "text", @readonly = "readonly", @class = "form-control validate", @name = "uf", @id = "uf", @placeholder = "uf" })
                                    </div>

                                    <div class="box-footer">
                                        <button type="submit" class="btn btn-primary">Cadastrar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        }
    </div>
</div>

@section Scripts
    {
    <script>
        $.validator.addMethod("CPF", function (value, element, arg) {

            value = value.toString();
            value = value.replace(/[^0-9]/g, "");

            if (CPFValido(value) && $("#CPF").val() !== "00000000000") {
                return true;
            } else {
                return false;
            }
        });
        function CPFValido(c) {
            if ((c = c.replace(/[^\d]/g, "")).length !== 11)
                return false;

            if (c === "00000000000")
                return false;

            var r;
            var s = 0;

            for (var i = 1; i <= 9; i++)
                s = s + parseInt(c[i - 1]) * (11 - i);

            r = (s * 10) % 11;

            if ((r === 10) || (r === 11))
                r = 0;

            if (r !== parseInt(c[9]))
                return false;

            s = 0;

            for (i = 1; i <= 10; i++)
                s = s + parseInt(c[i - 1]) * (12 - i);

            r = (s * 10) % 11;

            if ((r === 10) || (r === 11))
                r = 0;

            if (r !== parseInt(c[10]))
                return false;

            return true;
        }
        $(document).ready(function () {
            $.validator.addMethod("cep", function (value, element, arg) {
                value = value.toString();
                value = value.replace(/[^0-9]/g, "");
                if (ValidaCep(value) && value !== "00000000") {

                    return $("#cep").hasClass("validCEP");
                }
                return false;

            });
            function ValidaCep(cep) {
                exp = /\d{2}\.\d{3}\-\d{3}/
                if (!exp.test(cep.value) && cep.value != "00000-000")
                    return true;
                return false;
            }
            $('#cep').keyup(function () {

                var el = $(this)
                    .attr("name")
                    .split("cep")[1];
                if ($(this).val().length === 9) {
                    preencherCEP();
                }
            });

            function preencherCEP() {

                var cep = $("#cep").val();
                console.log(cep);
                $.getJSON("https://viacep.com.br/ws/" + cep + "/json/", function (dados) {

                    try {
                        console.log(dados);

                        $("#cep")
                            .addClass("validCEP")
                        $("#logradouro")
                            .attr('Readonly', 'Readonly')
                            .val(dados.logradouro)
                        $("#bairro")
                            .attr('Readonly', 'Readonly')
                            .val(dados.bairro)
                        $("#localidade")
                            .attr('Readonly', 'Readonly')
                            .val(dados.localidade)
                        $("#uf")
                            .attr('Readonly', 'Readonly')
                            .val(dados.uf)                                              
                        $("#complemento")
                            .attr('Readonly', 'Readonly')
                            .val(dados.complemento)
                        if ($(".cep-error").length) {
                            $(".cep-error").remove();
                        }
                    }

                    catch (e) {

                        console.log("Erro");

                        $('[name="logradouroResidencial.Logradouro"]')
                            .removeAttr("Readonly")
                    }
                });
            }
            
            $.validator.methods.Telefone = function (value, element) {
                return element != null;
            };
            /**/

            $("#cep").mask("00000-000", { clearIfNotMatch: true });
            $("#CPF").mask("000.000.000-00", { clearIfNotMatch: true });
            $("#Credito").mask('000.000.000.000.000,00', {reverse: true});
            $('#Telefone').mask('(00) 90000-0000');
            
            $("form").validate({
                rules: {
                    Nome: { required: true, NomeSobrenome: true },
                    Cpf: { required: true, marca: true },
                    Telefone: { required: true, Telefone: true }                    
                },
                messages: {
                    Nome: { required: "Informe seu nome completo", NomeSobrenome: "Digite seu nome e sobrenome" },

                    Cpf: {
                        required: "Informe um CPF",
                        Cpf: "Informe um CPF válido",
                    },
                    
                    Telefone: {
                        required: "Informe seu Celular",
                        Telefone: "Informe um numero valido",
                    }                    
                }
            });
        });
        $.validator.addMethod("Nome", function (value, element, arg) {

            if (value.trim().split(' ').length == 1) {
                return (value.match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 2);
            }
            else {
                return (value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 2
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 3
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 4
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 5
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 6);
            }
        });
        $.validator.addMethod("NomeSobrenome", function (value, element, arg) {

            if (value.trim().split(' ').length == 1) {
                return (value.match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 2);
            }
            else {
                return (value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 2
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 3
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 4
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 5
                    || value.trimRight().match(/^[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]+\s+[a-zA-Z\u00C0-\u017F´]{0,}$/) && value.trim().split(' ').length == 6);
            }
        });
    </script>
}
